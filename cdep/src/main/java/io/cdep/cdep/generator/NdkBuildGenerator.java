package io.cdep.cdep.generator;

import static io.cdep.cdep.io.IO.infoln;
import static io.cdep.cdep.utils.Invariant.require;
import static io.cdep.cdep.utils.StringUtils.safeFormat;

import io.cdep.API;
import io.cdep.annotations.NotNull;
import io.cdep.annotations.Nullable;
import io.cdep.cdep.Coordinate;
import io.cdep.cdep.ast.finder.AbortExpression;
import io.cdep.cdep.ast.finder.AssignmentExpression;
import io.cdep.cdep.ast.finder.AssignmentReferenceExpression;
import io.cdep.cdep.ast.finder.ConstantExpression;
import io.cdep.cdep.ast.finder.Expression;
import io.cdep.cdep.ast.finder.ExternalFunctionExpression;
import io.cdep.cdep.ast.finder.FunctionTableExpression;
import io.cdep.cdep.ast.finder.GlobalBuildEnvironmentExpression;
import io.cdep.cdep.ast.finder.IfSwitchExpression;
import io.cdep.cdep.ast.finder.InvokeFunctionExpression;
import io.cdep.cdep.ast.finder.ModuleArchiveExpression;
import io.cdep.cdep.ast.finder.ModuleExpression;
import io.cdep.cdep.ast.finder.ParameterExpression;
import io.cdep.cdep.ast.finder.StatementExpression;
import io.cdep.cdep.utils.CommandLineUtils;
import io.cdep.cdep.utils.ExpressionUtils;
import io.cdep.cdep.utils.FileUtils;
import io.cdep.cdep.utils.StringUtils;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class NdkBuildGenerator extends AbstractNdkBuildGenerator {

  GlobalBuildEnvironmentExpression globals;

  @Nullable
  String currentLib = null;

  @Nullable
  Coordinate coordinate = null;

  int indent = 0;

  public NdkBuildGenerator(@NotNull GeneratorEnvironment environment) {
    super(environment);
  }

  public void generate(FunctionTableExpression expr) {
    expr = (FunctionTableExpression)
        new JoinedFileToStringRewriter("(", ")").visitFunctionTableExpression(expr);
    visit(expr);
  }

  @Override
  protected void visitFunctionTableExpression(@NotNull FunctionTableExpression expr) {
    globals = expr.globals;
    File moduleFolder = new File(environment.modulesFolder, "ndk-build");
    moduleFolder = new File(moduleFolder, "cdep-dependencies");
    moduleFolder.mkdirs();
    File androidMk = new File(moduleFolder, "Android.mk");
    infoln("Generating %s", androidMk);
    appendIndented("###");
    appendIndented("### ndk-module file generated by CDep");
    appendIndented("### DO NOT EDIT");
    appendIndented("###");
    appendIndented("cdep_exploded_root := %s", environment.unzippedArchivesFolder);
    for (Coordinate coordinate : expr.findFunctions.keySet()) {
      this.coordinate = coordinate;
      StatementExpression findFunction = expr.findFunctions.get(coordinate);
      Set<String> libs = ExpressionUtils.findReferencedLibraryNames(findFunction);

      if (libs.size() == 0) {
        // Header-only library. Use BUILD_STATIC_LIBRARY.
        appendIndented("\n###");
        appendIndented("### Add dependency for CDep header-only module: %s", coordinate.toString());
        appendIndented("###");
        appendIndented("LOCAL_PATH := $(call my-dir)");
        appendIndented("include $(CLEAR_VARS)");
        appendIndented("LOCAL_MODULE := %s", coordinate.artifactId);
        visit(findFunction);
        appendIndented("include $(BUILD_STATIC_LIBRARY)");
        continue;
      }
      for (String lib : libs) {
        String moduleName = coordinate.artifactId;
        currentLib = CommandLineUtils.getLibraryNameFromLibraryFilename(new File(lib));
        if (libs.size() > 1) {
          moduleName += "-" + currentLib;
        }
        appendIndented("\n###");
        appendIndented("### Add dependency for CDep module: %s", coordinate.toString());
        if (libs.size() > 1) {
          appendIndented("### library: %s", currentLib);
        }
        appendIndented("###");

        appendIndented("LOCAL_PATH := $(call my-dir)");
        appendIndented("include $(CLEAR_VARS)");
        appendIndented("LOCAL_MODULE := %s", moduleName);
        visit(findFunction);
        currentLib = null;
        appendIndented("include $(PREBUILT_STATIC_LIBRARY)");
      }
    }
    try {
      FileUtils.writeTextToFile(androidMk, sb.toString());
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  protected void visitAssignmentExpression(@NotNull AssignmentExpression expr) {
    appendIndented("%s := ", expr.name);
    visit(expr.expression);
  }

  @Override
  protected void visitAssignmentReferenceExpression(AssignmentReferenceExpression expr) {
    append("$(%s)", expr.assignment.name);
  }


  @Override
  protected void visitModuleExpression(@NotNull ModuleExpression expr) {
    for (Coordinate dependency : expr.dependencies) {
      appendIndented("$(call import-module, %s)", dependency.artifactId);
    }
    super.visitModuleExpression(expr);
  }

  @Override
  protected void visitModuleArchiveExpression(@NotNull ModuleArchiveExpression expr) {
    boolean haveDownloaded = false;
    if (expr.includePath != null) {
      if (!haveDownloaded) {
        haveDownloaded = true;
        appendIndented("ifeq (,$(wildcard ");
        visit(expr.includePath);
        append("))");
        ++indent;
        appendIndented(generateCDepCall(
            "fetch-archive", this.coordinate.toString(),
            expr.file.toString(),
            expr.size.toString(),
            expr.sha256));
        --indent;
        appendIndented("endif");
      }
      appendIndented("LOCAL_EXPORT_C_INCLUDES += ");
      visit(expr.includePath);
    }
    if (expr.libraryPaths.length > 0) {
      boolean matched = false;
      List<String> saw = new ArrayList<>();
      for (int i = 0; i < expr.libraryPaths.length; ++i) {
        String lib = CommandLineUtils.getLibraryNameFromLibraryFilename(new File(expr.libs[i]));
        saw.add(lib);
        if (!lib.equals(currentLib)) {
          continue;
        }
        matched = true;

        if (!haveDownloaded) {
          haveDownloaded = true;
          appendIndented("ifeq (,$(wildcard ");
          visit(expr.libraryPaths[i]);
          append("))");
          ++indent;
          appendIndented(generateCDepCall(
              "fetch-archive", this.coordinate.toString(),
              expr.file.toString(),
              expr.size.toString(),
              expr.sha256));
          --indent;
          appendIndented("endif");
        }
        appendIndented("LOCAL_SRC_FILES += ");
        visit(expr.libraryPaths[i]);
      }
      require(matched, "Library '%s' was not in the manifest. Expected one of %s",
          currentLib, StringUtils.joinOn(",", saw));
    }
  }


  private String generateCDepCall(String... args) {
    try {
      return String.format("$(shell %s)",
          StringUtils.joinOn(" ", API.generateCDepCall(environment, args)));
    } catch (MalformedURLException e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  protected void visitInvokeFunctionExpression(@NotNull InvokeFunctionExpression expr) {
    if (expr.function == ExternalFunctionExpression.FILE_JOIN_SEGMENTS) {
      for (int i = 0; i < expr.parameters.length; ++i) {
        if (i > 0) {
          append("/");
        }
        visit(expr.parameters[i]);
      }
      return;
    }
    if (expr.function == ExternalFunctionExpression.STRING_EQUALS) {
      append("eq (");
      visit(expr.parameters[0]);
      append(",");
      visit(expr.parameters[1]);
      append(")");
      return;
    }

    if (expr.function == ExternalFunctionExpression.INTEGER_GTE) {
      append("neq (,$(call gte,");
      visit(expr.parameters[0]);
      append(",");
      visit(expr.parameters[1]);
      append("))");
      return;
    }
    throw new RuntimeException(expr.toString());
  }

  @Override
  protected void visitParameterExpression(ParameterExpression expr) {
    if (expr == globals.buildSystemTargetPlatform) {
      append("$(APP_PLATFORM_LEVEL)");
      return;
    }
    if (expr == globals.cdepDeterminedAndroidAbi) {
      append("$(TARGET_ARCH_ABI)");
      return;
    }
    if (expr == globals.cdepDeterminedAndroidRuntime) {
      append("$(APP_STL)");
      return;
    }
    if (expr == globals.buildSystemNoneRuntime) {
      append("system");
      return;
    }
    append("$(%s)", expr.name);
  }

  @Override
  protected void visitIfSwitchExpression(@NotNull IfSwitchExpression expr) {
    // Check whether this is a target system if-case. If so, we don't need to check since
    // ndk-build is purely android.
    if (isTargetSystemBranch(expr)) {
      Expression androidSystemBranch = tryFindAndroidSystemBranch(expr);
      if (androidSystemBranch != null) {
        visit(androidSystemBranch);
      }
      return;
    }
    for (int i = 0; i < expr.conditions.length; ++i) {
      if (i > 0) {
        //--indent;
        appendIndented("else");
        //++indent;
      }
      appendIndented("if");
      visit(expr.conditions[i]);
      ++indent;
      visit(expr.expressions[i]);
      --indent;
    }
    //--indent;
    appendIndented("else");
    ++indent;
    visit(expr.elseExpression);
    --indent;
    for (int i = 0; i < expr.conditions.length; ++i) {
      //--indent;
      appendIndented("endif");
    }
  }

  @Override
  protected void visitAbortExpression(@NotNull AbortExpression expr) {
    Object args[] = new String[expr.parameters.length];
    StringBuilder old = sb;
    for (int i = 0; i < args.length; ++i) {
      sb = new StringBuilder();
      visit(expr.parameters[i]);
      args[i] = sb.toString();
    }
    sb = old;
    appendIndented("$(error " + expr.message + ")", args);
  }

  private boolean isTargetSystemBranch(IfSwitchExpression expr) {
    for (int i = 0; i < expr.conditions.length; ++i) {
      Expression condition = expr.conditions[i];
      if (condition instanceof InvokeFunctionExpression) {
        InvokeFunctionExpression invoke = (InvokeFunctionExpression) condition;
        if (invoke.function == ExternalFunctionExpression.STRING_EQUALS) {
          if (invoke.parameters[0] == globals.buildSystemTargetSystem) {
            return true;
          }
        }
      }
    }
    return false;
  }

  private Expression tryFindAndroidSystemBranch(IfSwitchExpression expr) {
    for (int i = 0; i < expr.conditions.length; ++i) {
      Expression condition = expr.conditions[i];
      if (condition instanceof InvokeFunctionExpression) {
        InvokeFunctionExpression invoke = (InvokeFunctionExpression) condition;
        if (invoke.function == ExternalFunctionExpression.STRING_EQUALS) {
          ConstantExpression build = (ConstantExpression) invoke.parameters[1];
          if (build.value.equals("Android")) {
            return expr.expressions[i];
          }
        }
      }
    }
    return null;
  }

  private void appendIndented(String format, Object... args) {
    sb.append("\r\n");
    sb.append(new String(new char[indent * 2]).replace('\0', ' '));
    sb.append(safeFormat(format, args));
  }


}
